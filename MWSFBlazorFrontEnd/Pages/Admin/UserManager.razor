@page "/Admin/UserManager"

@using Microsoft.AspNetCore.Identity
@inject UserManager<IdentityUser> _userManager

@attribute [Authorize(Roles=Constants.AdminLevelRoles)]


<h1>User Manager</h1>

@*<h2>@message</h2>

<div id="roleFilter" class="opacity-50-dark">
    <div id="RoleButtons" class="row my-1 py-2">
        <div class="col-auto font-weight-bold h5 text-nowrap">Filter Roles:</div>
        <div class=" col-auto ml-auto"><button class="btn btn-primary" @onclick="@HandleShowAll">Clear Filters</button></div>
    </div>
    <ButtonGroup ButtonNames="_roleTabs" OnSelected="HandleSelectedRole"></ButtonGroup>
</div>*@

<MudTable Items="_userModelList" Loading="@(_userModelList == null)" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Roles</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Username">@context.UserName</MudTd>
        <MudTd DataLabel="Roles">            
            <MudChipSet MultiSelection="true" @bind-SelectedChips="@context.SelectedRoles" Filter="true">
                @foreach (var roleName in Constants.RoleNamesList)
                {
                    <MudChip Color="@_roleColors[roleName]"
                             Default="@context.Roles.Contains(roleName)"
                             Text="@roleName"
                             Variant="Variant.Text">
                    </MudChip>
                }
            </MudChipSet>
        </MudTd>
    </RowTemplate>
</MudTable>


@code {
    private List<string> _roleTabs = new();
    private string _message = "Nothing selected yet.. ";
    private List<IdentityUser> _users = new();
    private Dictionary<IdentityUser, IList<string>> _rolesPerUserDictionary = new();
    private List<UserModel> _userModelList = new();

    private readonly Dictionary<string, Color> _roleColors = new()
    {
        { "Admin", Color.Warning },
        { "Staff", Color.Secondary },
        { "Volunteer", Color.Info },
        { "Runner", Color.Success},
    };

    private class UserModel
    {
        internal IdentityUser User { get; set; }
        internal string UserName { get; set; }
        internal List<string> Roles { get; set; }
        internal MudChip[] SelectedRoles { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        _users = new List<IdentityUser>();
        foreach (var roleName in Constants.RoleNamesList)
        {
            var usersForRole = await _userManager.GetUsersInRoleAsync(roleName);
            _users.AddRange(usersForRole.Except(_users)); //This is dumb
        }
        await PopulateUserRoleDictionary(_users);
        _userModelList = new List<UserModel>();
        foreach (var userRoleCombo in _rolesPerUserDictionary)
        {
            _userModelList.Add(new UserModel
            {
                User = userRoleCombo.Key,
                UserName = userRoleCombo.Key.UserName,
                Roles = userRoleCombo.Value.ToList()
            });
        }
        _roleTabs = Constants.RoleNamesList;
    }

    private void HandleSelectedRole(string selected)
    {
        _message = "Selected role is " + selected;
    }

    private void HandleShowAll()
    {
        _message = "Show all roles";
    }

    private void AddRole(IdentityUser user, string roleName)
    {
        _message = $"Made {user.UserName} {roleName}";
    }

    private async Task PopulateUserRoleDictionary(List<IdentityUser> userList)
    {
        _rolesPerUserDictionary = new Dictionary<IdentityUser, IList<string>>();
        foreach (var user in userList)
        {
            var rolesToAdd = await _userManager.GetRolesAsync(user);
            _rolesPerUserDictionary.Add(user, rolesToAdd);
        }
    }

}
