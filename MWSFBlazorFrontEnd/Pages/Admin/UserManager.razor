@page "/Admin/UserManager"

@using Microsoft.AspNetCore.Identity
@using MWSFBlazorFrontEnd.Models.Users
@using Microsoft.AspNetCore.Components
@using MWSFBlazorFrontEnd.Components.Admin
@using DialogOptions = MudBlazor.DialogOptions
@using DialogService = MudBlazor.DialogService
@inject IDialogService _dialogService
@inject UserManager<IdentityUser> _userManager

@attribute [Authorize(Roles = RoleConstants.AdminLevelRoles)]


<h1>User Manager</h1>

<MudButton Color="Color.Primary" Class="mb-2" OnClick="@((e) => Create())"><MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />New Account</MudButton>
<MudTable Items="_userModelList" Loading="@(_userModelList == null)" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Roles</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">@context.User.UserName</MudTd>
        <MudTd DataLabel="Email">@context.User.Email</MudTd>
        <MudTd DataLabel="Roles">
            <MudChipSet MultiSelection="true" @bind-SelectedChips="@context.SelectedRoleChips" Filter="true">
                @foreach (var roleName in RoleConstants.RoleNamesList)
                {
                    <MudChip Color="@RoleConstants.RoleColors[roleName]"
                             Default="@context.SelectedRoles.Contains(roleName)"
                             Text="@roleName"
                             Variant="Variant.Text">
                    </MudChip>
                }
            </MudChipSet>
        </MudTd>

    </RowTemplate>
</MudTable>


@code {
    private List<string> _roleTabs = new();
    private string _message = "Nothing selected yet.. ";
    private List<IdentityUser> _users = new();
    private Dictionary<IdentityUser, IList<string>> _rolesPerUserDictionary = new();
    private List<UserDisplayModel> _userModelList = new();

    protected override async Task OnParametersSetAsync()
    {
        _userModelList = new List<UserDisplayModel>();
        await PopulateUserList();
        await SetUpSelectedRoles();
        _roleTabs = RoleConstants.RoleNamesList;
    }

    private async Task SetUpSelectedRoles()
    {
        _rolesPerUserDictionary = new Dictionary<IdentityUser, IList<string>>();

        foreach (var user in _users)
        {
            var roles = await _userManager.GetRolesAsync(user);
            _userModelList.Add(new UserDisplayModel()
            {
                User = user,
                SelectedRoles = roles.ToList()
            });
        }
    }

    private async Task PopulateUserList()
    {
        _users = new List<IdentityUser>();
        foreach (var roleName in RoleConstants.RoleNamesList)
        {
            var usersForRole = await _userManager.GetUsersInRoleAsync(roleName);
            _users.AddRange(usersForRole.Except(_users)); //This might be dumb
        }
    }

    private void HandleSelectedRole(string selected)
    {
        _message = "Selected role is " + selected;
    }

    private void HandleShowAll()
    {
        _message = "Show all roles";
    }

    private void AddRole(IdentityUser user, string roleName)
    {
        _message = $"Made {user.UserName} {roleName}";
    }

    private async Task Create()
    {
        var dialogOptions = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = _dialogService.Show<CreateUserDialog>("Create Account", dialogOptions);

        await dialog.Result;
    }

    private async Task PopulateUserRoleDictionary(List<IdentityUser> userList)
    {

    }

}
