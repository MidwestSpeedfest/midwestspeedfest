@page "/Admin/UserManager"

@using Microsoft.AspNetCore.Identity
@using MWSFBlazorFrontEnd.Models.Users
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using MWSFBlazorFrontEnd.Components.Admin
@using MWSFBlazorFrontEnd.Data
@using DialogOptions = MudBlazor.DialogOptions
@using DialogService = MudBlazor.DialogService
@inject IDialogService _dialogService
@inject UserManager<IdentityUser> _userManager
@inject AuthenticationStateProvider _authenticationStateProvider

@attribute [Authorize(Roles = RoleConstants.AdminLevelRoles)]

<h1>User Manager</h1>

<MudButton Color="Color.Primary" Class="mb-2" OnClick="@((e) => Create())"><MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />New Account</MudButton>
<MudTable Items="_userModelList" Loading="@(_userModelList == null)" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Roles</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">@context.User.UserName</MudTd>
        <MudTd DataLabel="Email">@context.User.Email</MudTd>
        <MudTd DataLabel="Roles">
            <MudChipSet MultiSelection="true" @bind-SelectedChips="@context.SelectedRoleChips" Filter="true">
                @foreach (var roleName in RoleConstants.RoleNamesList)
                {
                    <MudChip Color="@RoleConstants.RoleColors[roleName]"
                             Default="@context.SelectedRoles.Contains(roleName)"
                             Text="@roleName"
                             Variant="Variant.Text"
                             Disabled="@(ShouldDisableRoleChipBasedOnPermission(roleName))"
                             OnClick="@(() => context.Changed = true)">
                    </MudChip>
                }
            </MudChipSet>
        </MudTd>

    </RowTemplate>
</MudTable>


@code {
    private string _message = "Nothing selected yet.. ";
    private List<UserDisplayModel> _userModelList = new();

    protected override async Task OnParametersSetAsync()
    {
        _userModelList = new List<UserDisplayModel>();
        await SetUpUserModels();
    }

    private async Task SetUpUserModels()
    {
        var users = await _userManager.Users.ToListAsync();

        foreach (var user in users)
        {
            var userToAdd = await UserDisplayModel.CreateAsync(_userManager, user);
            _userModelList.Add(userToAdd);
        }
    }

    private void HandleSelectedRole(string selected)
    {
        _message = "Selected role is " + selected;
    }

    private void HandleShowAll()
    {
        _message = "Show all roles";
    }

    private void AddRole(IdentityUser user, string roleName)
    {
        _message = $"Made {user.UserName} {roleName}";
    }

    private async Task Create()
    {
        var dialogOptions = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = _dialogService.Show<CreateUserDialog>("Create Account", dialogOptions);

        await dialog.Result;
    }

    //TODO: Move this logic to UserDisplayModel class
    private void SaveRolesForUser(UserDisplayModel user)
    {
        if (user.Changed) //Only alter changed users
        {
            //Never alter Staff role from the UI
            var checkedRolesNames = user.SelectedRoleChips.Select(x => x.Text).Where(x => x != RoleConstants.RoleNames.Staff).ToList();
            _userManager.AddToRolesAsync(user.User, checkedRolesNames);
            _userManager.RemoveFromRolesAsync(user.User, RoleConstants.RoleNamesList.Where(x => !checkedRolesNames.Contains(x)
                                                                                                && !x.Equals(RoleConstants.RoleNames.Staff)));
        }
    }

    //TODO: Extract this logic out of UserManger.razor. Make it reusable
    private bool ShouldDisableRoleChipBasedOnPermission(string roleName)
    {
        var state = Task.Run(() => _authenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult()).Result;
        var userIsAdmin = state.User.IsInRole(RoleConstants.RoleNames.Admin);

        return roleName == RoleConstants.RoleNames.Admin  ||
               (roleName == RoleConstants.RoleNames.Staff && !userIsAdmin);
    }

}
