@page "/Admin/UserManager"

@using Microsoft.AspNetCore.Identity
@using MWSFBlazorFrontEnd.Models.Users
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Hosting
@using Microsoft.EntityFrameworkCore
@using Microsoft.Extensions.Hosting
@using Microsoft.IdentityModel.Tokens
@using MWSFBlazorFrontEnd.Components.Dialogs
@using MWSFBlazorFrontEnd.Data
@using Serilog
@using DialogOptions = MudBlazor.DialogOptions
@using DialogService = MudBlazor.DialogService
@inject IDialogService _dialogService
@inject UserManager<IdentityUser> _userManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ISnackbar _snackbar
@inject IWebHostEnvironment _hostEnvironment
@attribute [Authorize(Roles = RoleConstants.AdminLevelRoles)]

<h1>User Manager</h1>

@if (_hostEnvironment.IsDevelopment() || _hostEnvironment.IsStaging())
{
    <span>For testing use only:</span>
    <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="mb-2" OnClick="@((e) => Create())"><MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />New Account</MudButton>
}
<MudTable Items="_userModelList" Loading="@(_userModelList == null)" LoadingProgressColor="Color.Info">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Users</MudText>
        <MudSpacer />
        <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="SaveRolesForAllChangedUsers">Save Changes</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Username</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Roles</MudTh>
        <AuthorizeView Roles=@RoleConstants.AdminLevelRoles>
            <MudTh>Delete</MudTh>
        </AuthorizeView>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">@context.User.UserName</MudTd>
        <MudTd DataLabel="Email">@context.User.Email</MudTd>
        <MudTd DataLabel="Roles">
            <MudChipSet MultiSelection="true" @bind-SelectedChips="@context.SelectedRoleChips" Filter="true">
                @foreach (var roleName in RoleConstants.RoleNamesList)
                {
                    <MudChip Color="@RoleConstants.RoleColors[roleName]"
                             Default="@context.SelectedRoles.Contains(roleName)"
                             Text="@roleName"
                             Variant="Variant.Text"
                             Disabled="@(ShouldDisableRoleChipBasedOnPermission(roleName))"
                             OnClick="@(() => context.Changed = true)">
                    </MudChip>
                }
            </MudChipSet>
        </MudTd>
        <AuthorizeView Roles=@RoleConstants.AdminLevelRoles Context="auth">
            <MudTd DataLabel="Delete">
                 <MudButton Color=Color.Warning 
                            OnClick="@(() => Delete(context))"
                            Variant="Variant.Filled" 
                            Class="mb-2">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Color=Color.Default />
                            DELETE
                </MudButton>
            </MudTd>
        </AuthorizeView>
    </RowTemplate>
</MudTable>


@code {
    private string _message = "Nothing selected yet.. ";
    private List<UserDisplayModel> _userModelList = new();

    protected override async Task OnParametersSetAsync()
    {
        await ReloadTable();
    }

    private async Task SetUpUserModels()
    {
        var users = await _userManager.Users.ToListAsync();

        foreach (var user in users)
        {
            var userToAdd = await UserDisplayModel.CreateAsync(_userManager, user);
            _userModelList.Add(userToAdd);
        }
    }

    private void HandleSelectedRole(string selected)
    {
        _message = "Selected role is " + selected;
    }

    private void HandleShowAll()
    {
        _message = "Show all roles";
    }

    private void AddRole(IdentityUser user, string roleName)
    {
        _message = $"Made {user.UserName} {roleName}";
    }

    private async Task Create()
    {
        var dialogOptions = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = _dialogService.Show<CreateUserDialog>("Create Account", dialogOptions);

        await dialog.Result;
    }

    private async Task Delete(UserDisplayModel user)
    {
        var dialogOptions = new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialogParams = new DialogParameters
            {
                ["bodyText"] = $"Are you sure you want to delete {user.User.UserName}?",
                ["confirmColor"] = Color.Warning,
                ["confirmText"] = "Delete"
            };

        var dialog = _dialogService.Show<ConfirmDialog>("Delete User",dialogParams,dialogOptions);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                await _userManager.DeleteAsync(user.User);
                await ReloadTable();
                _snackbar.Add($"User {user.User.UserName} deleted", Severity.Success);
            }
            catch(Exception e)
            {
                Log.Error($"Unable to delete {user.User.UserName}");
                Log.Error(e, e.Message);
                _snackbar.Add($"Unable to delete {user.User.UserName}", Severity.Error);
            }
        }
    }

    private async Task SaveRolesForAllChangedUsers()
    {
        List<string> errorMessages = new();
        var changedUsers = _userModelList.Where(x => x.Changed).ToList();
        var isAdmin = await isCurrentUserAdmin();

        if (changedUsers.Count == 0)
        {
            _snackbar.Add("No users to save", Severity.Warning);
        }

        foreach (var changedUser in changedUsers)
        {
            try
            {
                await changedUser.SaveRolesAsync(isAdmin);
            }
            catch (Exception e)
            {
                var errorMessage = $"Unable to save roles for user {changedUser.User.UserName}";
                Log.Error(errorMessage, e.Message);
                errorMessages.Add(errorMessage);
            }
        }

        if (errorMessages.Count > 0)
        {
            foreach (var errorMessage in errorMessages)
            {
                _snackbar.Add(errorMessage, Severity.Error);
                await Task.Delay(500);
            }
            return;
        }

        if (errorMessages.Count == 0)
        {
            _snackbar.Add($"{changedUsers.Count()} users saved successfully", Severity.Success);
        }

    }

    private void SaveRolesForSingleUser(UserDisplayModel user)
    {
        //try
        //{
        //    user.SaveRoles();
        //    _snackbar.Add($"{user.User.UserName} updated successfully", Severity.Success);
        //}
        //catch(Exception e)
        //{
        //    var errorMessage = $"Unable to save roles for user {user.User.UserName}";
        //    Log.Error(errorMessage, e.Message);
        //    _snackbar.Add(errorMessage, Severity.Error);
        //}

    }

    private async Task ReloadTable()
    {
        _userModelList = new List<UserDisplayModel>();
        await SetUpUserModels();
    }

    //TODO: Extract this logic out of UserManger.razor. Make it reusable
    private bool ShouldDisableRoleChipBasedOnPermission(string roleName)
    {
        var userIsAdmin = Task.Run(() => isCurrentUserAdmin().GetAwaiter().GetResult()).Result;

        return roleName == RoleConstants.RoleNames.Admin ||
               (roleName == RoleConstants.RoleNames.Staff && !userIsAdmin);
    }

    private async Task<bool> isCurrentUserAdmin()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        return state.User.IsInRole(RoleConstants.RoleNames.Admin);
    }
}
